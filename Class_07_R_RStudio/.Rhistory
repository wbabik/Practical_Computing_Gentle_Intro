#vector of families & genera
fam_gen <- taxonomy %>% select(family, genus) %>% distinct()
#species abbreviations
sp_abr1 <- taxonomy %>% pull(sp_abr1) %>% unique()
#vector of genera
genera <- taxonomy %>% pull(genus) %>% unique()
#read codon-based alignments of functional alleles
#these include everything except alleles with frameshifts/stop codons
ex2_fun_aln <- read.FASTA("sequences/All_genera_ex2_funct_full_codons.fas")
ex3_fun_aln <- read.FASTA("sequences/All_genera_ex3_funct_full_codons.fas")
brd2_fun_aln <- read.FASTA("sequences/All_genera_brd2_funct_full_codons.fas")
fun_aln <- list("2" = ex2_fun_aln,
"3" = ex3_fun_aln,
"brd2" = brd2_fun_aln)
fun_aa <- lapply(fun_aln, trans)
fun_codon_df <- lapply(fun_aln, bin2df) %>% bind_rows() %>% rename(seq_codon = seq)
fun_aa_df <- lapply(fun_aa, bin2df) %>% bind_rows() %>% rename(seq_aa = seq)
fun_codon_aa_df <- fun_codon_df %>% left_join(fun_aa_df, by = "label")
gen_file <- "genotypes_ex2_ex3_brd2_all_genera.rds"
if(file.exists(gen_file)){
print("I'm reading a pre-existing genotype .rds file!")
gen <- readRDS(gen_file)
} else {
#read genotypes for all genera into a list
g <- lapply(tax, read_gen)
taxonomy_sel <- taxonomy %>% select(family, genus, gen_abr1, species, sp_abr1)
gen <- bind_rows(g) %>%
left_join(al, by = "seq") %>%
left_join(fun_codon_aa_df, by = "label") %>%
left_join(id, by = "id") %>%
left_join(taxonomy_sel, by = c("genus", "species"))
brd_cov <- gen %>% filter(exon == "brd2") %>% group_by(id) %>% mutate(cov = sum(n_reads)) %>%
select(id, exon, cov) %>% distinct()
cov <- bind_rows(cov, brd_cov)
gen <- gen %>% left_join(cov, by = c("id", "exon"))
saveRDS(gen, gen_file)
}
#get list of lists containing for each species
#ids of individuals genotyped in ex2, ex3 and BRD2
#------------
# ids_gen <- gen %>% select(id, exon, sp_abr1) %>% distinct()
# exons <- ids_gen %>% pull(exon) %>% unique()
# typed <- NULL
# for (s in sp_abr1) {
#   temp1 <- ids_gen %>% filter(sp_abr1 == s)
#   typed_ex <- NULL
#   for (e in exons) {
#     ids <- temp1 %>% filter(exon == e) %>% pull(id) %>% unique() %>% sort()
#     typed_ex[[e]] <- ids
#   }
#   typed[[s]] <- typed_ex
# }
# saveRDS(typed, "Ids_typed_amplicons.rds")
#------------------
typed <- readRDS("Ids_typed_MIPs_amplicons.rds")
mhc15 <- lapply(typed, "[[", "mhc15") %>% unlist()
brd15 <- lapply(typed, "[[", "brd15") %>% unlist()
gen15 <- gen %>% filter((exon %in% c("2", "3") & id %in% mhc15) | (exon == "brd2" & id %in% brd15))
citation()
citation("ape")
library(tidyverse)
df <- tibble(
x = 1:3,
y = c("a", "d,e,f", "g,h"),
z = c("1", "2,3,4", "5,6")
)
View(df)
separate_rows(df, sep=",")
separate_rows(df, y, z, sep=",")
## Including Plots
You can also embed plots, for example:
---
title: "Untitled"
output: github_document
---
---
title: "Untitled"
output: github_document
---
```{r setup, include=FALSE}
knitr::opts_chunk$set(echo = TRUE)
```
## GitHub Documents
This is an R Markdown format used for publishing markdown documents to GitHub. When you click the **Knit** button all R code chunks are run and a markdown file (.md) suitable for publishing to GitHub is generated.
## Including Code
You can include R code in the document as follows:
```{r cars}
summary(cars)
```
## Including Plots
You can also embed plots, for example:
```{r pressure, echo=FALSE}
plot(pressure)
```
Note that the `echo = FALSE` parameter was added to the code chunk to prevent printing of the R code that generated the plot.
install.packages("rmarkdown")
library(rmarkdown)
install.packages("xfun")
library(xfun)
pressure
colorize <- function(x, color) {
if (knitr::is_latex_output()) {
sprintf("\\textcolor{%s}{%s}", color, x)
} else if (knitr::is_html_output()) {
sprintf("<span style='color: %s;'>%s</span>", color, x)
} else x
}
my_logical <- c(T,T,T,F,F)
knitr::opts_chunk$set(echo = TRUE)
18*0.8
CO2
identical(c(1:10), c(1:10))
identical(c(1:10), c(2:11))
c(1:10) %in% c(5:10)
?`%in%`
library(dplyr)
a <- c(1:10) %>% filter(>5)
?filter
a <- c(1:10) %>% filter(.>5)
iris
library(dplyr)
?left_join
?pivot_longer
head(iris
)
nrow(iris
)
str(iris)
summary(iris)
filter(iris, Species == "setosa")
ir <- iris
View(ir)
iris
a <- c(F,T)
sort(a)
a <- c(T,F)
sort(a)
arrange(iris, Species, desc(Sepal.Length))
my_logical <- c(T,T,T,F,F)
library(tidyverse)
arrange(iris, Species, desc(Sepal.Length))
head(arrange(iris, desc(Species), Petal.Length))
?head
?select
str(iris)
select(iris, 1:3, 5)
select(iris, -4)
select(iris, Species, starts_with("Petal"))
select(iris, Species, everything())
select(iris, Species, -(starts_with("Petal")))
str(iris)
head(select(iris, Species, ends_width("Width")), n = 10)
head(select(iris, Species, ends_with("Width")), n = 10)
head(select(iris, -(starts_with("Petal"))), n = 10)
mutate(iris, nowa = c("A", "B"))
mutate(iris, nowa = c("A", "B", "C"))
mutate(iris, One = "1")
mutate(iris, Petal.Ratio = Petal.Length/Petal.Width)
head(mutate(iris, Petal.Length.Squared = Petal.Length^2,
Sepal.Length.Squared = Sepal.Length^2))
head(mutate(iris, Petal.Length.Squared = Petal.Length^2,
Sepal.Length.Squared = Sepal.Length^2), n = 10)
iris
str(iris)
a <- select(iris, Species, starts_with("Sepal"))
a <- mutate(a, Sepal.Ratio = Sepal.Length/Sepal.Width)
a <- select(iris, Species, starts_with("Sepal"))
a <- mutate(a, Sepal.Ratio = Sepal.Length/Sepal.Width)
a
a <- select(iris, Species, starts_with("Sepal")) %>% mutate(Sepal.Ratio = Sepal.Length/Sepal.Width)
a <- select(iris, Species, starts_with("Sepal")) %>% mutate(Sepal.Ratio = Sepal.Length/Sepal.Width)
a <- select(iris, Species, starts_with("Sepal")) %>% mutate(Sepal.Ratio = Sepal.Length/Sepal.Width)
a
a <- iris %>% select(Species, starts_with("Sepal")) %>% mutate(Sepal.Ratio = Sepal.Length/Sepal.Width)
a
?sd
iris %>% select(Species, Sepal.Length) %>%  group_by(Species) %>%
mutate(sp.Mean = mean(Sepal.length),
sp.SD = sd(Sepal.Length),
Zstand.Sepal.Length = (Sepal.Length - sp.Mean)/sp.SD
iris %>% select(Species, Sepal.Length) %>%  group_by(Species) %>%
mutate(sp.Mean = mean(Sepal.length),
sp.SD = sd(Sepal.Length),
Zstand.Sepal.Length = (Sepal.Length - sp.Mean)/sp.SD)
iris %>% select(Species, Sepal.Length) %>%  group_by(Species) %>%
mutate(sp.Mean = mean(Sepal.Length),
sp.SD = sd(Sepal.Length),
Zstand.Sepal.Length = (Sepal.Length - sp.Mean)/sp.SD)
iris %>% select(Species, Sepal.Length) %>%  group_by(Species) %>%
mutate(sp.Mean = mean(Sepal.Length),
sp.SD = sd(Sepal.Length),
Zstand.Sepal.Length = (Sepal.Length - sp.Mean)/sp.SD) %>% select(-c(sp.Mean, sp.SD))
iris %>% select(Species, Sepal.Length) %>%  group_by(Species) %>%
mutate(sp.Mean = mean(Sepal.Length),
sp.SD = sd(Sepal.Length),
Zstand.Sepal.Length = (Sepal.Length - sp.Mean)/sp.SD) %>% select(-c("sp.Mean", "sp.SD"))
summarise(iris, mean)
summarise(iris, Sepal.Length, mean)
summarise(iris, Sepal.Length, mean())
summarise(iris, mean.Sepal.Length = mean(Sepal.Length))
str(summarise(iris, mean.Sepal.Length = mean(Sepal.Length)))
summarise(iris, mean.Sepal.Length = mean(Sepal.Length))
iris %>% select (Species, Petal.Length) %>% group_by(Species) %>%
summarise(min.Petal.Length = min(Petal.Length),
mean.Petal.Length = mean(Petal.Length),
max.Petal.Length = max(Petal.Length))
filter(iris, Species == "setosa", Sepal.Length >= 5.5) %>% head(n = 10)
ilter(iris, Species == "setosa", Sepal.Length >= 5.5)
filter(iris, Species == "setosa", Sepal.Length >= 5.5)
Sys.setenv(LANG = "en")
filter(iris, (Species == "versicolor" | "virginica"), Petal.Length >=5)
iris
options(max.print = 10)
iris
options(rows.print = 10)
iris
options(max.print = 1000)
iris
library(dplyr)
#read genotypes
gen <- read.table("data/genotypes.txt", header = TRUE, sep = "\t", encoding = "UTF-8")
class(CO2)
?typeof
a <- c("W", "M")
a <- c("W", "M")
b <- c("W", "[MT]")
for(e in seq(a)){
printe
}
a <- c("W", "M")
b <- c("W", "[MT]")
for(e in seq(a)){
print(e)
}
for(e in seq(a)){
print(e)
grep(b[e], a[e])
}
a <- c("W", "M")
b <- c("W", "[MT]")
s <- 0
for(e in seq(a)){
print(e)
t <- grep(b[e], a[e])
s <- s+t
}
s
a <- c("W", "M")
b <- c("W", "[ST]")
s <- 0
for(e in seq(a)){
print(e)
t <- grep(b[e], a[e])
s <- s+t
}
s
grep(b[1], a[1])
grep(b[2], a[2])
grepl(b[2], a[2])
grepl(b[1], a[1])
a <- c("W", "M")
b <- c("W", "[ST]")
s <- 0
for(e in seq(a)){
print(e)
t <- grepl(b[e], a[e])
s <- s+t
}
s
a <- c("W", "M")
b <- c("W", "[M]")
s <- 0
for(e in seq(a)){
print(e)
t <- grepl(b[e], a[e])
s <- s+t
}
s
library(tidyverse)
library(ape)
library(phangorn)
library(treeio)
library(ggtree)
library(ggpubr)
#takes list of positions in aa alignment
#with expected aa (accepts regex)
#count the number of matching positions
#the idea was to count the number of expected "anchor residues"
nclass <- function(s, pos, aa) {
ss <- str_split(s, "") %>% unlist() %>% .[pos]
score <- 0
for(e in seq_along(ss)) {
m <- grepl(aa[e], ss[e])
score <- score + m
}
return(score)
}
#vectorize but only the string with sequence, two other args are nit vectorizes
#USE.NAMES = FALSE, because otherwise there's a problem with returning named vector, not sure why
vect_nclass <- Vectorize(nclass, vectorize.args = c("s"), USE.NAMES = FALSE)
#adaptation of genus_trees() that doesn't mark species but marks
#potential classical/nonclassical provided as a column of gen
genus_trees_class_nonclass <- function(t, genotypes = gen){
d <- genotypes %>% filter(genus == t)
#c_n <- d %>% pull(non_classical) %>% unique() %>% sort()
#sp_list <- d %>% pull(species) %>% unique() %>% sort()
ts <- vector("list", 2)
for(ex in c("2", "3")){
seq <- d %>% filter(exon == ex) %>% select(label, seq) %>% distinct(label, seq) %>% as.data.frame() %>% df2DNA()
ann <- d %>% filter(exon == ex) %>% select(label, funct, genus, species, class_nonclass) %>%
distinct(label, species, .keep_all = TRUE) %>% mutate(pres = 1) %>%
pivot_wider(names_from = "species", values_from = "pres", values_fill = list(pres = 0))
alg_file <- paste0(t, "_ex_", ex, "_alignment.rds")
if(file.exists(alg_file)){
alg <- readRDS(alg_file)
} else {
alg <- muscle(seq, exec = "muscle3.8.31_i86win32.exe")
saveRDS(alg, alg_file)
}
JC <- dist.dna(alg, model = "JC", pairwise.deletion = TRUE)
tree <- bionj(JC)
tree <- midpoint(tree)
t_ann <- full_join(tree, ann, by = "label")
t_plot <- ggtree(t_ann, layout = "rectangular", ladderize = TRUE, aes(color = funct), size = 0.5) +
scale_colour_manual(name = NULL, values = c("y" = "green", "n" = "red"),
labels = c("y" = "funct", "n" = "non-funct"),
na.value = "darkgrey") +
geom_tippoint(aes(fill = class_nonclass), size = 1.5, shape = 21, colour = "white") +
scale_fill_manual(name = element_blank(),
values = c("class" = "green", "intermed" = "yellow", "nonclass" = "red"),
labels = c("class" = "classical", "intermed" = "intermediate", "nonclass" = "non-classical"),
na.value = "lightgrey")
theme_tree2(legend.title = element_blank())
ts[[as.character(ex)]] <- t_plot
}
tree_ex23 <- ggarrange(ts[["2"]], ts[["3"]],
labels = c("ex2", "ex3"),
ncol = 2, nrow = 1,
font.label = list(size = 11, color = "black", face = "bold", family = NULL),
common.legend = TRUE)
Fig <- annotate_figure(tree_ex23,
top = text_grob(paste0(t), face = "italic", size = 14))
return(Fig)
}
#positions in alignment with anchor residues
pos_ex2 <- c(61)
pos_ex3 <- c(47, 50, 51, 66)
#residues in these positions
aa_ex2 <- c("Y")
aa_ex3 <- c("T", "[KR]", "W", "Y")
#reads data
d <- readRDS("ex2_ex3_aa_alignment_df.rds") %>%
separate(label, into = c("gen_abr", NA, NA), sep ="_", remove = FALSE)
ex2 <- d %>% filter(grepl("_ex2_", label)) %>%
mutate(n_class_aa = vect_nclass(seq_aa, pos_ex2, aa_ex2),
class_nonclass = ifelse(n_class_aa == 0, "nonclass", "class"))
ex3 <- d %>% filter(grepl("_ex3_", label)) %>%
mutate(n_class_aa = vect_nclass(seq_aa, pos_ex3, aa_ex3),
class_nonclass = ifelse(n_class_aa == 4, "class", ifelse(n_class_aa ==3, "intermed", "nonclass")))
ex2_ex3 <- bind_rows(ex2, ex3)
install.packages("ggseqlogo")
getwd()
library(tidyverse)
gen <- read.table("data/genotypes.txt", header = TRUE, sep = "\t", encoding = "UTF-8")
nrow(gen)
gen %>% select(ID) %>% distinct() %>% nrow()
gen_noNA <- gen %>% filter(!is.na(i_0003))
ID_info <- read.table("data/ID_locality_species.txt", header = TRUE, sep = "\t", encoding = "UTF-8") %>%
select(-transcriptome)
head(ID_info)
localities <- read.table("data/localities.txt", header = TRUE, sep = "\t", encoding = "UTF-8") %>%
select(locality, country, latitude, longitude)
0.95*984956
0.05*984956
(944106-935708)
8398/49247
a <- c("   ble", "ble")
grep("^\\s")
grep("^\\s", a)
grep("^[]+", a)
grep("^[ ]+", a)
for (i in 1:100) {
print(i)
}
rnorm(100)
?rnorm
a <- sample.int(1000, 100)
a <- sample.int(100, 10)
for (i in a){
print(a)
}
for (i in a){
print(i)
}
?seq_along
for (i in seq_along(a){
print(i)
}
for (i in seq_along(a)){
print(i)
}
for (i in seq_along(a)){
print(a[i])
}
14*17+28
16*19
29595/32636
24148/32636
install.packages("poppr")
q()
mtcars
a <- mtcars
View(a)
b <- a %>% filter(vs > 0)
library(tidyverse)
b <- a %>% filter(vs > 0)
c <- a %>% filter(qsec > 20 | qsec < 15)
View(c)
datasets()
data()
Orange
install.packages("GLMsData")
1600/96
1.1e9/2e6
1.1e9/1.5e6
1.6e9/6e9
1.6e9/6e6
2800/7563
7563/2800
(7563/2800)*1.23*4.4
(7563/2800)*1.23*4.3
74*4
27*8
?data
data()
ChickWeight
ToothGrowth
summary(ToothGrowth)
help("ToothGrowth")
3*0.3+0.15*1*0.15*2*0.4*4
3*0.3+0.15*1+0.15*1+0.4*4
(3/5)*0.3+0.15*(1/2)+0.15*(1/2)+0.4*(4/5)
2970*0,2
2970*0.2
330*1.2
330e9/300
400e9/300
5e9*200
4000*4.3*12.3
4000*4.3*1.23
plot(x^2, -2, 2)
plot(dnorm, -2, 2)
plot(dnorm, -5, 5)
plot(function(X){x^2}, -2, 2)
plot(function(x){x^2}, -2, 2)
plot(function(x){x^2}, -200, 200)
plot(function(x){5*x^2}, -200, 200)
plot(function(x){x^3}, -200, 200)
plot(function(x){log(x)}, -200, 200)
plot(function(x){log(x)}, 0.1, 10)
pnorm(0)
pnorm(-2)
pnorm(-2)*2
pnorm(-1.96)*2
qnorm(10)
qnorm(1)
qnorm(0.95)
qnorm(0.975)
0.3*3.67/5+0.15+1.67/2*0.15+0.4
7.8/10.5
?pbinom
?ppoison
?ppoisson
ppois()
?ppois
qpois(0.9, 0.05)
124*0.05
ppois(0, 6.2)
ppois(0, 6.2, lower=FALSE)
124*0.02
ppois(0, 2.48, lower=FALSE)
qpois(0.01, 6.2)
qpois(0.1, 6.2)
qpois(0.001, 6.2)
qpois(0.01, 6.2)
qpois(0.02, 6.2)
qpois(0.03, 6.2)
pppis(0, 1.24)
ppois(0, 1.24)
ppois(0, 2.48)
ppois(0, 1.24, lower = FALSE)
ppois(0, 3.7, lower = FALSE)
maf5n62
maf5n62 <- 0.05*124
ppois(0, 2.48)
0.01*124*2
ppois(0, 5)
ppois(0, 5, lower = FALSE)
remotes::install_github('royfrancis/pophelper')
library(pophelper)
1.78+0.89
7750+155
7750+1550
fmr <- 1/150
min <- fmr*0.2
8/min
12/min
bp <- 71200*264
frgen <- bp/1.723e9
1.723e9/71200
71200/1723
setwd("C:/Dropbox/teaching/Practical_Computing_Gentle_Intro/Class_07_R_RStudio")
